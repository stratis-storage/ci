#!/usr/bin/python3
#
# Copyright 2020 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Calculates information comparing the versions of dependencies in a Rust project
to the versions of dependencies available on Fedora Rawhide.
"""


# isort: STDLIB
import argparse
import json
import sys

# isort: LOCAL
from _utils import build_cargo_metadata, build_koji_repo_dict, version_from_spec


def get_errors(exc):
    """
    Generates a sequence of exceptions starting with exc and following the chain
    of causes.
    """
    while True:
        yield exc
        exc = getattr(exc, "__cause__") or getattr(exc, "__context__")
        if exc is None:
            return


def _main_engine(explicit_dependencies, koji_repo_dict):
    """
    Computes the information about the explicit dependencies in Cargo.toml
    based on the specified kobj repo dict.

    :param explciit_dependencies: the dependencies in Cargo.toml
    :param koji_repo_dict: corresponding values in the repo dict

    :returns: a summary of the data found, as a dict
    :rtype: dict of str * list of str
    """
    (missing, high, low) = ([], [], [])
    for crate, spec in explicit_dependencies.items():
        koji_version = koji_repo_dict.get(crate)
        if koji_version is None:
            print(f"No Fedora package for crate {crate} found", file=sys.stderr)
            missing.append(crate)
            continue

        if koji_version in spec:
            continue

        try:
            version = version_from_spec(spec)
        except RuntimeError as err:
            raise RuntimeError(
                f"Could not parse version from specification for crate {crate}"
            ) from err

        if koji_version < version:
            print(
                f"Version {version} of crate {crate} higher than maximum {koji_version} "
                f"that is available on Fedora",
                file=sys.stderr,
            )
            high.append(crate)
            continue

        # The koji version is not in the spec and it is not less than the spec
        # so it must be more.
        print(
            f"Version {koji_version} of crate {crate} is available in Fedora. "
            f"Requires update in Cargo.toml",
            file=sys.stderr,
        )
        low.append(crate)

    return {"high": high, "low": low, "missing": missing}


def main():
    """
    The main method
    """
    parser = argparse.ArgumentParser(
        description=(
            "Compares versions of direct dependencies in Fedora with versions "
            "specified in Cargo.toml. Prints the result of the comparison to "
            "stdout in JSON format. Returns a non-zero exit code if any "
            "missing, too low, or too high dependencies are to be found in the "
            "JSON output. Logs the discovery of any missing, too low, or "
            "too high dependency to standard error. Note that, because it is "
            "possible to specify dependencies to ignore in any category, "
            "log messages may be emitted in cases where the exit code is 0."
        )
    )
    help_text = (
        "Fedora release for which to check dependencies: "
        "'rawhide' or 'f<n>' where <n> is some natural number"
    )
    parser.add_argument("--release", action="store", default="rawhide", help=help_text)
    help_text = "Manifest path for cargo commands"
    parser.add_argument(
        "--manifest-path", action="store", dest="manifest_path", help=help_text
    )

    help_text = "Ignore a dependency known to be missing"
    parser.add_argument(
        "--ignore-missing",
        action="extend",
        dest="ignore_missing",
        nargs="*",
        type=str,
        default=[],
        help=help_text,
    )

    help_text = "Ignore a dependency known to be higer than those available"
    parser.add_argument(
        "--ignore-high",
        action="extend",
        dest="ignore_high",
        nargs="*",
        type=str,
        default=[],
        help=help_text,
    )

    help_text = "Ignore a dependency known to be lower than those available"
    parser.add_argument(
        "--ignore-low",
        action="extend",
        dest="ignore_low",
        nargs="*",
        type=str,
        default=[],
        help=help_text,
    )

    help_text = "Ignore all dependencies in specified category"
    parser.add_argument(
        "--ignore-category",
        action="extend",
        dest="ignore_category",
        nargs="*",
        choices=["high", "low", "missing"],
        default=[],
        help=help_text,
    )

    args = parser.parse_args()

    itemized_ignores = {
        "high": args.ignore_high,
        "low": args.ignore_low,
        "missing": args.ignore_missing,
    }

    def filter_items(items, category):
        """
        Filter items according to command-line arguments

        :param items: a list of items
        :type items: list of str
        :param str category: the category to filter

        :returns: the filtered items
        :rtype: list of str
        """
        return (
            []
            if category in args.ignore_category
            else [item for item in items if item not in itemized_ignores[category]]
        )

    # Read the dependency versions specified in Cargo.toml
    explicit_dependencies = build_cargo_metadata(args.manifest_path)

    # Build koji dict
    try:
        koji_repo_dict = build_koji_repo_dict(
            frozenset(explicit_dependencies.keys()), args.release
        )
    except RuntimeError as err:
        raise RuntimeError(
            f'Unable to parse repo page for release "{args.release}"'
        ) from err

    result = _main_engine(explicit_dependencies, koji_repo_dict)

    result = {
        "missing": filter_items(result["missing"], "missing"),
        "high": filter_items(result["high"], "high"),
        "low": filter_items(result["low"], "low"),
    }

    print(json.dumps(result), file=sys.stdout)
    return 1 if any(x != [] for x in result.values()) else 0


if __name__ == "__main__":
    try:
        sys.exit(main())
    except RuntimeError as pgm_err:
        errors = list(get_errors(pgm_err))
        sys.exit("; ".join(str(e) for e in errors))
