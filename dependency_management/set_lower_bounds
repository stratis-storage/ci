#!/usr/bin/python3
#
# Copyright 2020 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Verify that the lower bounds set on dependencies in Cargo.toml are not
incorrect by being too low.
"""


# isort: STDLIB
import argparse
import subprocess
import sys
from random import shuffle

# isort: LOCAL
from _utils import build_cargo_metadata, build_cargo_tree_dict, version_from_spec


def _do_updates(explicit_dependencies, manifest_path):
    """
    Emit commands that update dependencies to the lowest allowed by Cargo.toml.

    Postcondition: return value == [] <-> all crates were updated

    :param explicit_dependencies: map of the dependencies in Cargo.toml
    :type explicit_dependencies: dict of str * str
    :param manifest_path: the path to Cargo.toml
    :type manifest_path: str or NoneType
    :returns: a list of the crates that were last tried
    :rtype: list of str * str
    """

    command_prefix = [
        "cargo",
        "update",
    ]
    if manifest_path is not None:
        command_prefix.append(f"--manifest-path={manifest_path}")

    updatables = list(explicit_dependencies.items())[:]

    def _update_once():
        """
        Try once to update all crates to their precise versions.
        Randomize the order in which updates are tried.

        Postcondition: lhs of return value == [] -> all packages have
        been updated to their values in Cargo.toml.
        Postcondition: frozenset(rhs of return value) <=
                       frozenset(lhs of return value)
        :returns: the crates that were tried and that failed to update
        :rtype: pair of list of str * str * list of str * str
        """
        # Read the dependency versions specified in Cargo.lock from Cargo.toml
        cargo_tree = build_cargo_tree_dict(manifest_path)

        assert frozenset(explicit_dependencies.keys()) == frozenset(
            cargo_tree.keys()
        ), (
            f"in Cargo.toml but not in 'cargo tree' output: "
            f"{frozenset(explicit_dependencies.keys()) - frozenset(cargo_tree.keys())}, "
            f"vice-versa: {frozenset(cargo_tree.keys()) - frozenset(explicit_dependencies.keys())}"
        )

        shuffle(updatables)

        tried = []
        failed = []
        for (crate, spec) in updatables:
            if str(spec) == "*":
                continue

            try:
                version = version_from_spec(spec)
            except RuntimeError as err:
                raise RuntimeError(
                    (
                        f"Specified spec {spec} for crate {crate} could not be "
                        f"converted to a version to use as an update target"
                    )
                ) from err

            current_version = cargo_tree[crate]
            if current_version != version:
                command = command_prefix + [
                    f"--package={crate}:{current_version}",
                    f"--precise={version}",
                ]
                try:
                    tried.append((crate, version))
                    subprocess.run(
                        command,
                        check=True,
                    )
                except subprocess.CalledProcessError as err:
                    failed.append((crate, version))
                    print(err, file=sys.stderr)

                # If any update was attempted, rebuilding the tree information
                # may yield new version information for direct dependencies
                # that were not explicitly updated as direct dependencies can
                # also be transitive dependencies.
                cargo_tree = build_cargo_tree_dict(manifest_path)

                # "cargo update" succeeded but did not change the version to
                # the one specified. This can happen when the specified crate
                # is in a sub-directory of the current crate and is specified
                # by a path key in Cargo.toml. In that case, "cargo update"
                # chooses to succeed.
                if cargo_tree[crate] == current_version:
                    tried = [(c, v) for (c, v) in tried if c != crate]

        return (tried, failed)

    # The loop terminates if all packages have reached their value in
    # Cargo.toml. It may terminate without finding a solution which does exist.
    # This is because the solution found for transitive dependencies when
    # reducing a dependency to its lowest value may prohibit being able to
    # reduce other dependencies, and the originally reduced dependencies are
    # never perturbed in order to look for a different solution. There are
    # standard ML techniques for dealing with this problem which are not worth
    # pursuing now. There is a very small possibility that the loop will fail to
    # terminate if there is an oscillation of versions due to some mutually
    # dependent packages.
    while True:
        print("Update iteration started...", file=sys.stderr)
        (tried, failed) = _update_once()

        # Indicates that there were no packages left to adjust
        if tried == []:
            break

        # Indicates that there was a failure to adjust every package not
        # yet at its value in Cargo.toml
        if tried == failed:
            break

    return tried


def main():
    """
    The main method
    """
    parser = argparse.ArgumentParser(
        description=(
            "Lowers all dependencies in Cargo.lock to the versions specified "
            "in Cargo.toml."
        )
    )
    help_text = "Manifest path for cargo commands"
    parser.add_argument(
        "--manifest-path", action="store", dest="manifest_path", help=help_text
    )

    args = parser.parse_args()

    # Read the dependency versions specified in Cargo.toml
    explicit_dependencies = build_cargo_metadata(args.manifest_path)

    tried = _do_updates(explicit_dependencies, args.manifest_path)
    if tried == []:
        print(
            (
                "Dependency versions in Cargo.lock have been set to the "
                "minimum values that satisfy the Cargo.toml specification"
            ),
            file=sys.stderr,
        )
        return 0

    print(
        (
            "Crates that could not be updated to their minimum version "
            "compatible with the Cargo.toml specification:"
        ),
        file=sys.stderr,
    )
    for (crate, version) in tried:
        print(f"{crate} could not be updated to {version}", file=sys.stderr)
    return 1


if __name__ == "__main__":
    sys.exit(main())
